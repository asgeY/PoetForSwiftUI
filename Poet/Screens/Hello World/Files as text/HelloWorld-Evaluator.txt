//
//  HelloWorld-Evaluator.swift
//  Poet
//

import Foundation

extension HelloWorld {
    class Evaluator {
        
        // Translator
        lazy var translator: Translator = Translator(current)
        
        // Current State
        var current = PassableState(State.initial)
    }
}

// MARK: State

extension HelloWorld.Evaluator {
    enum State: EvaluatorState {
        case initial
        case sayStuff(SayStuffState)
    }
    
    struct SayStuffState {
        var helloCount: Int
        var bubbleText: String?
        var buttonAction: Action
    }
}

// MARK: View Cycle

extension HelloWorld.Evaluator: ViewCycleEvaluating {
    func viewDidAppear() {
        showSayStuffState()
    }
    
    private func showSayStuffState() {
        let state = SayStuffState(
            helloCount: 0,
            bubbleText: nil,
            buttonAction: Action.sayHello
        )
        current.state = .sayStuff(state)
    }
}

// MARK: Actions

extension HelloWorld.Evaluator: ActionEvaluating {
    enum Action: EvaluatorAction {
        case sayHello
        case sayNothing
        
        var name: String {
            switch self {
            case .sayHello:     return "Say Hello"
            case .sayNothing:   return "Say Nothing"
            }
        }
    }
    
    func _evaluate(_ action: Action) {
        switch action {
            
        case .sayHello:
            sayHello()
            
        case .sayNothing:
            sayNothing()
        }
    }
    
    private func sayHello() {
        guard case var .sayStuff(state) = current.state else { return }
        
        state.bubbleText = "Hello World!"
        state.buttonAction = .sayNothing
        state.helloCount += 1
        
        current.state = .sayStuff(state)
    }
    
    private func sayNothing() {
        guard case var .sayStuff(state) = current.state else { return }
        
        state.bubbleText = nil
        state.buttonAction = .sayHello
        
        current.state = .sayStuff(state)
    }
}
